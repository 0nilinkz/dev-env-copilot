name: Build and Publish VS Code Extension

on:
  push:
    branches: [ main ]
    paths:
      - 'vscode-extension/**'
      - '.github/workflows/publish-extension.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'vscode-extension/**'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      publish:
        description: 'Publish to marketplace'
        required: false
        default: false
        type: boolean

env:
  EXTENSION_PATH: ./vscode-extension

jobs:
  test:
    name: Test Extension
    runs-on: ubuntu-latest
    strategy:
      matrix:
        vscode-version: [stable, insiders]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ env.EXTENSION_PATH }}/package-lock.json

    - name: Install dependencies
      working-directory: ${{ env.EXTENSION_PATH }}
      run: npm ci

    - name: Lint
      working-directory: ${{ env.EXTENSION_PATH }}
      run: npm run lint

    - name: Compile
      working-directory: ${{ env.EXTENSION_PATH }}
      run: npm run compile

    - name: Run Tests
      working-directory: ${{ env.EXTENSION_PATH }}
      run: |
        export DISPLAY=:99
        sudo Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        npm test
      env:
        VSCODE_VERSION: ${{ matrix.vscode-version }}

  build:
    name: Build Extension Package
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ env.EXTENSION_PATH }}/package-lock.json

    - name: Install dependencies
      working-directory: ${{ env.EXTENSION_PATH }}
      run: npm ci

    - name: Compile
      working-directory: ${{ env.EXTENSION_PATH }}
      run: npm run compile

    - name: Copy and Verify Assets
      working-directory: ${{ env.EXTENSION_PATH }}
      run: |
        npm run copy-assets
        echo "Verifying assets..."
        ls -la icon.png LICENSE
        echo "✅ Assets copied successfully"

    - name: Package Extension
      working-directory: ${{ env.EXTENSION_PATH }}
      run: |
        npm run package
        ls -la *.vsix

    - name: Upload VSIX Artifact
      uses: actions/upload-artifact@v4
      with:
        name: extension-vsix
        path: ${{ env.EXTENSION_PATH }}/*.vsix
        retention-days: 30

  publish-marketplace:
    name: Publish to VS Code Marketplace
    runs-on: ubuntu-latest
    needs: [test, build]
    if: |
      (github.event_name == 'release' && github.event.action == 'published') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.publish == 'true')
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ env.EXTENSION_PATH }}/package-lock.json

    - name: Install dependencies
      working-directory: ${{ env.EXTENSION_PATH }}
      run: npm ci

    - name: Compile
      working-directory: ${{ env.EXTENSION_PATH }}
      run: npm run compile

    - name: Download VSIX Artifact
      uses: actions/download-artifact@v4
      with:
        name: extension-vsix
        path: ${{ env.EXTENSION_PATH }}

    - name: Publish to VS Code Marketplace
      working-directory: ${{ env.EXTENSION_PATH }}
      run: |
        # Verify the VSIX file exists
        ls -la *.vsix
        
        # Publish to marketplace
        npx vsce publish --packagePath *.vsix
      env:
        VSCE_PAT: ${{ secrets.VSCE_PAT }}

    - name: Publish to Open VSX Registry
      working-directory: ${{ env.EXTENSION_PATH }}
      run: |
        # Install ovsx CLI
        npm install -g ovsx
        
        # Publish to Open VSX
        ovsx publish *.vsix
      env:
        OVSX_PAT: ${{ secrets.OVSX_PAT }}
      continue-on-error: true

  publish-github-release:
    name: Attach VSIX to GitHub Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Download VSIX Artifact
      uses: actions/download-artifact@v4
      with:
        name: extension-vsix
        path: ./

    - name: Attach VSIX to Release
      uses: softprops/action-gh-release@v2
      with:
        files: '*.vsix'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ env.EXTENSION_PATH }}/package-lock.json

    - name: Install dependencies
      working-directory: ${{ env.EXTENSION_PATH }}
      run: npm ci

    - name: Run npm audit
      working-directory: ${{ env.EXTENSION_PATH }}
      run: npm audit --audit-level=moderate

    - name: Download VSIX Artifact
      uses: actions/download-artifact@v4
      with:
        name: extension-vsix
        path: ${{ env.EXTENSION_PATH }}

    - name: Scan VSIX for sensitive data
      working-directory: ${{ env.EXTENSION_PATH }}
      run: |
        # Extract and scan VSIX contents
        unzip -q *.vsix -d vsix-contents
        echo "Scanning for sensitive patterns..."
        
        # Look for common sensitive patterns
        if grep -r -i "password\|secret\|token\|key" vsix-contents/ --exclude-dir=node_modules || true; then
          echo "⚠️ Potential sensitive data found in VSIX package"
        else
          echo "✅ No sensitive data patterns found"
        fi
        
        # Check file sizes to prevent accidentally including large files
        find vsix-contents/ -type f -size +1M -exec ls -lh {} \; || true